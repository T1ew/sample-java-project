apply plugin: 'java'
apply plugin:'jacoco'
jacoco {
    toolVersion = "0.8.6"
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
group = 'com.example'
version = 'V1'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.beust:jcommander:1.81'  // JCommander dependency
    implementation 'org.projectlombok:lombok:1.18.26'  // Lombok dependency
    annotationProcessor 'org.projectlombok:lombok:1.18.26'  // Lombok annotation processor
    testImplementation 'junit:junit:4.13.2'
}

test {
    // Specify the directory containing test classes
    testClassesDirs = sourceSets.test.output.classesDirs

    // Optionally configure test options
    testLogging {
        // Configure which events to log during test execution
        events 'passed', 'skipped', 'failed'
    }
    finalizedBy jacocoTestReport
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.example.SampleJavaProject'  // Main class to run
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with copySpec {
        from sourceSets.main.output  // Include compiled classes
        into ''
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // Handle duplicate files by excluding duplicates
    archiveBaseName.set('sample-java-project')  // Name of the JAR file
    archiveVersion.set('V1')  // Version of the JAR file
    destinationDirectory.set(file("$buildDir/libs"))  // Output directory for the JAR file
}

// jar {
//     manifest {
//         attributes 'Main-Class': 'com.example.SampleJavaProject'
//     }

//     from sourceSets.main.output  // Include compiled classes in the JAR
//     archiveBaseName = 'sample-java-project'  // Name of the JAR file
//     destinationDirectory = file('build/libs')  // Output directory for the JAR file
// }

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        xml.destination = file("$buildDir/reports/jacoco/xml")
        html.destination = file("$buildDir/reports/jacoco/html")
    }
}

task buildReport {
    group = 'Reporting'
    description = 'Generates a summary report of the build, including test and coverage results.'

    doLast {
        println '--- Build Summary ---'
        println "Build Version: ${version}"
        println "Source Compatibility: ${sourceCompatibility}"
        println "Target Compatibility: ${targetCompatibility}"
        println 'Test Results:'
        println "HTML: file:///${buildDir}/reports/tests/index.html"
        println "JUnit XML: file:///${buildDir}/test-results/test/TESTS-TestSuites.xml"
        println 'Coverage Report:'
        println "HTML: file:///${buildDir}/reports/jacoco/html/index.html"
        println "XML: file:///${buildDir}/reports/jacoco/xml/jacocoTestReport.xml"
    }
}

// Ensure the custom report runs after the build
build.finalizedBy(buildReport)
